@page "/individual-chat"
@using BlazorChatWebApp.Client.AppState
@using BlazorChatWebApp.Client.ChatServices
@using ChatModels.DTOs
@using ChatModels.Models
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.SignalR.Client
@using System.Security.Claims
@rendermode InteractiveWebAssembly
@inject MyHubConnectionService HubConnectionService
@inject AvailableUserState state


<div class="row">
    <div class="col-lg-12">
        <div class="card-header sticky">@state.Fullname</div>
        <div class="card" style="max-height:65vh; min-height:65vh; overflow:scroll;" id="chatContainer">
            <AuthorizeView>
                @foreach (var chat in IndividualChats)
                {
                    string position = chat.SenderName == context.User.Identity!.Name ? "align-self-end" : "align-self-start";
                    string style = chat.SenderName == context.User.Identity.Name ? "margin-right:10px" : "margin-left:14px";
                    string Name = chat.SenderName == context.User.Identity.Name ? "You" : chat.SenderName!;
                    string Color = chat.SenderName == context.User.Identity.Name ? "text-primary" : "text-info"!;
                    <div class="card mt-1 mb-1 d-flex @position"
                         style="width:500px; border-radius:10px; @style">
                        <div class="card-header">
                            <small class="@Color"><b>@Name</b></small><br />
                            @chat.message <br />
                            <small class="text-muted">@chat.Date.ToString("dd MMM, yyyy hh:mm tt")</small>
                        </div>
                    </div>
                }
            </AuthorizeView>
        </div>
    </div>
</div>



<div class="row mt-3 mb-2">
    <div class="col-lg-4"></div>
    <div class="col-lg-4"></div>
    <div class="col-lg-4">
        <EditForm Model="IndividualChatModel" OnValidSubmit="SendIndividualChat">
            <DataAnnotationsValidator />
            <InputTextArea @bind-Value="IndividualChatModel.message" class="form-control" placeholder="Message" />
            <button class="float-end btn btn-success mt-3" type="submit">
                Send
            </button>
        </EditForm>
    </div>
</div>


<div class="row">
    <div class="col-lg-12 d-flex justify-content-center">
        @if (!HubConnectionService.IsConnected)
        {
            <div class=" alert alert-danger">Chat Disconnected </div>
        }
        else
        {
            <div class=" alert alert-success">Chat Connected </div>
        }
    </div>

</div>


@code {
    [CascadingParameter]
    public Task<AuthenticationState> authenticationState { get; set; }
    public List<IndividualChatDTO> IndividualChats { get; set; } = [];
    private IndividualChat IndividualChatModel { get; set; } = new();
    private HubConnection _hubConnection;

    protected override async Task OnInitializedAsync()
    {
        _hubConnection = HubConnectionService.GetHubConnection();
        _hubConnection.On<IndividualChatDTO>("ReceiveIndividualMessage", (individualChat) =>
        {
            IndividualChats.Add(individualChat);
            InvokeAsync(() => StateHasChanged());
        });

        var httpClient = new HttpClient();
        var user = new RequestChatDTO()
            {
                SenderId = ((await authenticationState).User).Claims.FirstOrDefault(u => u.Type == ClaimTypes.NameIdentifier)!.Value,
                ReceiverId = state.ReceiverId

            };
        var response = await httpClient.PostAsJsonAsync($"https://localhost:7130/api/chat/individual", user);
        IndividualChats = await response.Content.ReadFromJsonAsync<List<IndividualChatDTO>>();


    }

    public async void SendIndividualChat()
    {
        IndividualChatModel.ReceiverId = state.ReceiverId;
        IndividualChatModel.SenderId =
        ((await authenticationState).User).Claims.FirstOrDefault(u => u.Type == ClaimTypes.NameIdentifier)!.Value;

        await _hubConnection!.SendAsync("AddIndividualChat", IndividualChatModel);

        var data = new IndividualChatDTO()
            {
                SenderId = IndividualChatModel.SenderId,
                ReceiverId = IndividualChatModel.ReceiverId,
                message = IndividualChatModel.message,
                Date = IndividualChatModel.Date,
                SenderName = (await authenticationState).User.Identity!.Name,
                ReceiverName = state.Fullname

            };

        IndividualChats.Add(data);
        IndividualChatModel = new();
    }
}
