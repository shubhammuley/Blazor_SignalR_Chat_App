@page "/chat"
@attribute [Authorize]
@using Microsoft.AspNetCore.Authorization

@using BlazorChatWebApp.Client.DTOs
@using BlazorChatWebApp.Client.ChatServices
@using ChatModels
@inject NavigationManager navigationManager
@using Microsoft.AspNetCore.SignalR.Client
@rendermode InteractiveWebAssembly


<PageTitle>ChatPage</PageTitle>

<div class="row">

    <div class="col-lg-2">
        <ul class="list-group">
            @if(AvailableUsers != null)
            {
                foreach(var u in AvailableUsers)
                {
                    <li class="list-group-item">@u.Fullname</li>
                }
            }
        </ul>
    </div>

    <div class="col-ld-7">
        <div class="card">
            <Microsoft.AspNetCore.Components.Authorization.AuthorizeView>
                <Authorized>
                    <div class="card-header">Chat App [@context.User.Claims.Where(f=>f.Type == System.Security.Claims.ClaimTypes.Name).Last().Value]</div>
                </Authorized>

            </Microsoft.AspNetCore.Components.Authorization.AuthorizeView>
            <div class="card-header">Chat App</div>
            <div class="card-body">
                <ul class="list-group">
                    @foreach (var chat in Chats)
                    {
                        <li class="list-group-item mb-2">
                            @chat.DateTime.Date.ToString("dd/MMM/yy")
                            <br />
                            <span class="fw-bold"> @chat.UserName</span>
                            <br />
                            @chat.Message
                        </li>
                    }
                </ul>

                <div class="mt-3">
                    <EditForm Model="Chat" OnValidSubmit="SendChat">
                        <DataAnnotationsValidator />
                        <div class="vstack gap-1">
                            <InputText @bind-Value="Chat.UserName" class="form-control w-25" placeholder="UserName" />
                            <InputTextArea @bind-Value="Chat.Message" class="form-control" placeholder="Message" />
                        </div>
                        <button class="float-end btn btn-success mt-3" type="submit">Send</button>
                    </EditForm>
                </div>

            </div>
            <div class="card-footer fw-bold">
                @if (!IsConnected)
                {
                    <div class="alert alert-danger"> Chat Disconnected </div>
                }
                else
                {
                    <div class="alert alert-success"> Chat Connected </div>
                }

            </div>
        </div>
    </div>
</div>

@code {
    public List<AvailableUserDTO> AvailableUsers { get; set; } = [];

    private Chat Chat = new();
    private HubConnection? _hubConnection;
    public List<Chat> Chats { get; set; } = [];


    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder()
    .WithUrl(navigationManager.ToAbsoluteUri("/chathub"))
        .Build();

        _hubConnection.On<Chat>("ReceiveMessage", (chat) =>
        {
            Chats.Add(chat);
            InvokeAsync(() => StateHasChanged());
        });


        _hubConnection.On<List<AvailableUserDTO>>("NotifyAllClients", (users) =>
     {
         AvailableUsers = users;
         InvokeAsync(() => StateHasChanged());
     });

        await _hubConnection.StartAsync();

        var httpClient = new HttpClient();
        Chats = await httpClient.GetFromJsonAsync<List<Chat>>("https://localhost:7130/api/chat");
        AvailableUsers = await httpClient.GetFromJsonAsync<List<AvailableUserDTO>>("https://localhost:7130/api/chat/users");
    }

    public bool IsConnected => _hubConnection!.State == HubConnectionState.Connected;

    public void SendChat()
    {
        _hubConnection!.SendAsync("SendMessage", Chat);
        Chat.Message = null;
    }
}
