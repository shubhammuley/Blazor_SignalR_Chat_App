@page "/chat"
@using Microsoft.AspNetCore.SignalR.Client
@rendermode InteractiveWebAssembly
@inject NavigationManager NavManager

<PageTitle>ChatPage</PageTitle>

<div class="row">
    <div class="col-ld-7">
        <div class="card">
            <div class="card-header">Chat App</div>
            <div class="card-body">
            </div>
            <div class="card-footer">
                @if (!IsConnected)
                {
                    <div class="alert alert-danger"> Chat Disconnected </div>
                }
                else
                {
                    <div class="alert alert-success"> Chat Connected </div>
                }

            </div>
        </div>
    </div>
</div>

@code {
    private HubConnection? hubConnection;
    private List<string> Messages = [];

    private string? userName;
    public string Message;
    private DateTime Date = DateTime.Now;


    protected async override Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
        .WithUrl(NavManager.ToAbsoluteUri("/chathub")).Build();


        hubConnection.On<string, string, DateTime>("ReceiveMessage", (userName, Message, Date) =>
        {
            var concatMessage = $"{Date}{Environment.NewLine}{userName}{Environment.NewLine}{Message}";
            Messages.Add(concatMessage);
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    private bool IsConnected =>
    hubConnection!.State == HubConnectionState.Connected;

    Task Send() =>
    hubConnection!.SendAsync("SendMessage", userName, Message, Date);
}
