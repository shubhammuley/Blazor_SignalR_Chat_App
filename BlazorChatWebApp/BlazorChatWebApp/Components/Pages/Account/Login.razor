
@page "/Account/Login"

<h1>Log in</h1>

<div class="row">
    <div class="col-md-4">
        @(message != ""? message:"")
        <section>
            <EditForm Model="loginModel" method="post" OnValidSubmit="LoginAsync" FormName="LoginForm" >
                <DataAnnotationsValidator />
                <h2>Use a local account to log in</h2>
                <hr/>
                <ValidationSummary class="text-danger" role="alert" />


                <div class="form-floating mb-3">
                    <InputText @bind-Value="loginModel.Email" class="form-control" 
                    area-required="true" placeholder="user@example.com"  />
                    <label for="email" class="form-label">Email</label>
                    <ValidationMessage For="()=>loginModel.Email" class="text-danger"/>
                </div>


            <div class="form-floating mb-3">
                <InputText @bind-Value="loginModel.Password" class="form-control" autocomplete="current-password"
                           area-required="true" placeholder="password" />
                <label for="password" class="form-label">Password</label>
                <ValidationMessage For="()=>loginModel.Email" class="text-danger" />
            </div>

            <div >
                <button type="submit" class="w-100 btn btn-lg btn-primary">LogIn

                </button>
            </div>
            </EditForm>
        </section>

    </div>
</div>


@code {
    string message = "";

    [SupplyParameterFromForm]
    private LoginModel loginModel { get; set; } = new();

    async Task LoginAsync()
    {
        var findUser = await userManager.FindByEmailAsync(
            loginModel.Email);

        if (findUser is null)
        {
            message = "Sorry, user not registered";
            return;
        }

        var result = await signInManager.CheckPasswordSignInAsync(findUser, loginModel.Password, false);

        if (!result.Succeeded)
        {
            message = "Sorry, Invalid Email/Passowrd";
            return;
        }

        await signInManager.PasswordSignInAsync(
            findUser, loginModel.Password, false, false);
        navManager.NavigateTo("/", true);
    }

    public class LoginModel
    {
        [Required, EmailAddress]
        public string Email { get; set; } = string.Empty;
        [Required]
        public string Password { get; set; } = string.Empty;
    }

}
